// Generated by CoffeeScript 1.10.0
(function() {
  var nanobar, riotadmin, typesafe, typeshave;

  typeshave = require('typeshave');

  nanobar = require('nanobar');
  require('riot-routehandler');

  typeshave.verbose = 1;

  typesafe = typeshave.typesafe;

  riotadmin = typesafe({
    'type': 'object',
    'properties': {
      'project': {
        'type': 'object',
        'required': true,
        'properties': {
          'title': {
            'type': 'string',
            'required': true
          },
          'url': {
            'type': 'string',
            'required': true
          }
        }
      },
      'footer': {
        'type': 'object',
        'required': true,
        'properties': {
          'slogan': {
            'type': 'string',
            'required': true
          }
        }
      }
    }
  }, function(config) {
    riot.compile(function() {
      var $bodyEl, $sidedrawerEl;
      window.loadingbar = config.loadingbar = new nanobar({
        bg: '#333'
      });
      config.routes = [
        {
          route: "#/foo",
          tag: "home"
        }
      ];
      config.routeroptions = {
        hashbang: true
      };
      this.tags = riot.mount('*', config);
      console.dir(this.tags);

      /*
       * utility prototype functions  etc
       */
      window.$ = document.querySelector.bind(document);
      window.$$ = document.querySelectorAll.bind(document);
      Element.prototype.hasClass = function(className) {
        return new RegExp('(\\s|^)' + className + '(\\s|$)').test(this.getAttribute('class'));
      };
      Element.prototype.addClass = function(className) {
        if (!this.hasClass(className)) {
          this.setAttribute('class', this.getAttribute('class') + ' ' + className);
        }
        return this;
      };
      Element.prototype.removeClass = function(className) {
        var removedClass;
        removedClass = this.getAttribute('class').replace(new RegExp('(\\s|^)' + className + '(\\s|$)', 'g'), '$2');
        if (this.hasClass(className)) {
          this.setAttribute('class', removedClass);
        }
        return this;
      };
      Element.prototype.toggleClass = function(className) {
        if (this.hasClass(className)) {
          this.removeClass(className);
        } else {
          this.addClass(className);
        }
        return this;
      };
      Element.prototype.appendTo = function(el) {
        el.innerHTML = el.innerHTML + this.innerHTML;
      };
      Element.prototype.hide = function() {
        this.style.display = 'none';
      };

      /*
       * setup animations & fades
       */
      $bodyEl = $('body');
      $sidedrawerEl = $('#sidedrawer');
      if (!$('.js-show-sidedrawer')) {
        console.error('sidedrawer menu not loaded..tags loaded properly?');
      }
      $('.js-show-sidedrawer').addEventListener('click', $('app-sidemenu')._tag.toggle);
      $('#sidedrawer-toggler-xs').addEventListener('click', $('app-sidemenu')._tag.toggle);
      $('#content').addClass('fadein');
    });
  });

  if (typeof window !== "undefined" && window !== null) {
    window.riotadmin = riotadmin;
  }

}).call(this);
